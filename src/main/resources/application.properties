server.port=8995
#server.context-path=/auth
spring.profiles.active=dev



#mysql 配置
spring.datasource.url=jdbc:mysql://192.168.1.252/xksj?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=xksj
spring.datasource.password=Update##88

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#开启对sql语句的打印
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=true

#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#在生产环境中不要使用create-drop，这样会在程序启动时先删除旧的，再自动创建新的，最好使用update
#create：每次加载Hibernate时都会删除上一次生成的表，然后重新生成新表，即使两次没有任何修改也会这样执行，这就导致每次启动都是一个新的数据库，也是导致数据丢失的重要原因。
#
#create-drop：每次加载Hibernate时都会生成表，但当SessionFactory关闭时，所生成的表将自动删除。
#
#update：最常用的属性值，第一次加载Hibernate时创建数据表（前提是需要先有数据库），以后加载HIbernate时只会根据model更新，即使model已经删除了某些属性，数据表也不会随之删除字段。
#
#validate：每次加载Hibernate时都会验证数据表结构，只会和已经存在的数据表进行比较，根据model修改表结构，但不会创建新表。
#none 禁用ddl




#启用远程更新
spring.devtools.remote.secret=1234
spring.devtools.remote.debug.enabled=true
spring.devtools.livereload.enabled=true
spring.devtools.remote.debug.local-port=8007
spring.devtools.restart.enabled=true
spring.devtools.restart.exclude=static/**